#!/bin/bash

set -e # Early exit if any command returns non-zero status code
set -v # Print executed lines

# This example shows how set up links to GnuPG shared libraries on Linux,
# without using --ldconfig option.
#
# Turning the --ldconfig switch on causes following things to happen:
#
# 1.  Directory in which shared libraries are installed to is evaluated from
#     Makefile, which in turn has been generated by ./configure script.
# 2.  Path to that directory is written to file
#     /etc/ld.so.conf.d/gpg-from_build_scripts.conf, which is supposed to be
#     read by ldconfig tool.
# 3.  `ldconfig -v` or `sudo ldconfig -v` is executed (depending on if --sudo
#     option is set or not).
#
# If you are unhappy with these defaults, then you may prefer not to enable
# --ldconfig option, and do one of the following things instead:
#
# 1.  Configure and run ldconfig yourself.
# 2.  Set LD_RUN_PATH environment variable before compiling components.
# 3.  Set LD_LIBRARY_PATH environment variable.
#
# Setting LD_LIBRARY_PATH is the least recommended solution.
#
# This example takes the approach with setting LD_RUN_PATH environment variable.

###############
#    SETUP    #
###############

PREFIX="/opt/gnupg"

# Put PREFIX under a temp dir if PREFIX is not writable.
if	[[ ! -d "${PREFIX%/*}" && ! -w /              ]] || \
	[[ ! -d "${PREFIX}"    && ! -w "${PREFIX%/*}" ]]; then
	PREFIX="$(mktemp -d)${PREFIX}"
fi

GPG_CONFIGURE_OPTS="--prefix=${PREFIX} \
	--with-libgpg-error-prefix=${PREFIX} \
	--with-libassuan-prefix=${PREFIX} \
	--with-libgpg-error-prefix=${PREFIX} \
	--with-libgcrypt-prefix=${PREFIX} \
	--with-libassuan-prefix=${PREFIX} \
	--with-ksba-prefix=${PREFIX} \
	--with-npth-prefix=${PREFIX}"

# Configure script looks for executables like gpg-error-config in locations
# provided with $PATH and $GPG_PREFIX, hence we must enhance $PATH.
export PATH="${PREFIX}/bin:${PATH}"

export LD_RUN_PATH="${PREFIX}/lib:${LD_RUN_PATH}"

mkdir -p "${PREFIX}"

# The --sudo option is typically needed when installing to standard locations.
# Note that `sudo ./install_gpg_all …` is not the same—it would compile as
# root (not recommended).
./install_gpg_all.sh --suite-version latest --sudo --configure-opts "${GPG_CONFIGURE_OPTS}" "$@"

###############
#    TESTS    #
###############

# Assert path to executable…
[[ $(command -v gpg) == "${PREFIX}/bin/gpg" ]]

# Assert that executable actually works…
gpg --version

# Assert executable version…
gpg --version | head -n 1 | cut -d" " -f 3 | grep -xE "2\.2\.[0-9]+"
